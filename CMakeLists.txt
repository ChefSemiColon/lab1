cmake_minimum_required(VERSION 3.11)
# Require modern C++
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project(Games_Engineering)

#### Setup Directories ####
#Main output directory
SET(OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/")
# Ouput all DLLs from all libs into main build folder
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY})

#### Add External Dependencies ####
add_subdirectory("lib/sfml")
set(SFML_INCS "lib/sfml/include")
link_directories("${CMAKE_BINARY_DIR}/lib/sfml/lib")

# B2D - Box2D phyics library
add_subdirectory("lib/b2d/Box2D")
#include_directories("lib/b2d/Box2D/")
set(B2D_INCS "lib/b2d/Box2D/")
link_directories("${CMAKE_BINARY_DIR}/lib/sfml/lib")

file(GLOB_RECURSE RESOURCE_FILES "res/*.*")

# Maths lib
add_library(lib_maths INTERFACE)
target_sources(lib_maths INTERFACE "${CMAKE_SOURCE_DIR}/lib_maths/maths.h")
target_include_directories(lib_maths INTERFACE "${CMAKE_SOURCE_DIR}/lib_maths" SYSTEM INTERFACE ${SFML_INCS})

## Tile loader lib
file(GLOB_RECURSE SOURCE_FILES lib_tile_level_loader/*.cpp lib_tile_level_loader/*.h)
add_library(lib_tile_level_loader STATIC ${SOURCE_FILES})
target_include_directories(lib_tile_level_loader INTERFACE "${CMAKE_SOURCE_DIR}/lib_tile_level_loader/" )
target_link_libraries(lib_tile_level_loader sfml-graphics lib_maths)

# ECM lib
file(GLOB_RECURSE SOURCE_FILES lib_ecm/*.cpp lib_ecm/*.h)
add_library(lib_ecm STATIC ${SOURCE_FILES})
target_include_directories(lib_ecm INTERFACE "${CMAKE_SOURCE_DIR}/lib_ecm" )
target_link_libraries(lib_ecm PRIVATE lib_maths)

file(GLOB_RECURSE SOURCE_FILES engine/*.cpp engine/*.h)
add_library(lib_engine STATIC ${SOURCE_FILES} ${RESOURCE_FILES})
target_include_directories(lib_engine INTERFACE "${CMAKE_SOURCE_DIR}/engine/" PUBLIC SYSTEM ${B2D_INCS} )
target_link_libraries(lib_engine lib_tile_level_loader lib_maths lib_ecm Box2D sfml-graphics sfml-audio)

#### Practical 4 ####
file(GLOB_RECURSE SOURCES 4_pacman/*.cpp 4_pacman/*.h)
add_executable(4_PACMAN ${SOURCES})
target_include_directories(4_PACMAN PRIVATE ${SFML_INCS})
target_link_libraries(4_PACMAN lib_tile_level_loader lib_maths lib_ecm sfml-graphics)

## 6 - Platformer
file(GLOB_RECURSE SOURCES 6_platformer/*.cpp 6_platformer/*.h)
file(GLOB_RECURSE CMPNTS 6_platformer/components/*.cpp 6_platformer/components/*.h)
file(GLOB_RECURSE SCENES 6_platformer/scenes/*.cpp 6_platformer/scenes/*.h)
add_executable(6_PLATFORMER ${SOURCES} ${RESOURCE_FILES})
source_group("components" FILES ${CMPNTS})
source_group("resources" FILES ${RESOURCE_FILES})
target_include_directories(6_PLATFORMER SYSTEM PRIVATE ${SFML_INCS} ${B2D_INCS})
target_link_libraries(6_PLATFORMER lib_engine lib_maths lib_ecm lib_tile_level_loader Box2D sfml-graphics)
set(EXECUTABLES ${EXECUTABLES} 6_PLATFORMER)

## 7 - Pathfinding
file(GLOB_RECURSE SOURCES 8_states/*.cpp 8_states/*.h)
file(GLOB_RECURSE CMPNTS 8_states/components/*.cpp 8_states/components/*.h)
file(GLOB_RECURSE SCENES 8_states/scenes/*.cpp 8_states/scenes/*.h)
add_executable(8_STATES ${SOURCES} ${RESOURCE_FILES})
source_group("components" FILES ${CMPNTS})
source_group("resources" FILES ${RESOURCE_FILES})
target_include_directories(8_STATES SYSTEM PRIVATE ${SFML_INCS} ${B2D_INCS})
target_link_libraries(8_STATES lib_engine lib_maths lib_ecm lib_tile_level_loader Box2D sfml-graphics)
set(EXECUTABLES ${EXECUTABLES} 8_STATES)


## 7 - Pathfinding
file(GLOB_RECURSE SOURCES 7_pathfinding/*.cpp 7_pathfinding/*.h)
file(GLOB_RECURSE CMPNTS 7_pathfinding/components/*.cpp 7_pathfinding/components/*.h)
file(GLOB_RECURSE SCENES 7_pathfinding/scenes/*.cpp 7_pathfinding/scenes/*.h)
add_executable(7_PATHFINDING ${SOURCES} ${RESOURCE_FILES})
source_group("components" FILES ${CMPNTS})
source_group("resources" FILES ${RESOURCE_FILES})
target_include_directories(7_PATHFINDING SYSTEM PRIVATE ${SFML_INCS} ${B2D_INCS})
target_link_libraries(7_PATHFINDING lib_engine lib_maths lib_ecm lib_tile_level_loader Box2D sfml-graphics)
set(EXECUTABLES ${EXECUTABLES} 7_PATHFINDING)

set_target_properties(6_PLATFORMER 
    PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(Configuration)
)
set_target_properties(7_PATHFINDING
    PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(Configuration)
)

set_target_properties(8_STATES
    PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(Configuration)
)

#### Link Dependencies ####
foreach (exe ${EXECUTABLES})
  #set working directory to build dir
  set_target_properties(${exe} PROPERTIES 
    VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(Configuration)
  )

  target_link_libraries(${exe}
    lib_maths
    optimized sfml-audio debug sfml-audio-d
    optimized sfml-window debug sfml-window-d
    optimized sfml-system debug sfml-system-d
    optimized sfml-graphics debug sfml-graphics-d
    optimized sfml-main
  )
  
  if(MSVC) # Hide Console in release builds
    set_target_properties(${exe} PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
  endif(MSVC)
  
  add_dependencies(${exe} sfml-graphics sfml-audio copy_resources)
endforeach ()

add_custom_target(copy_resources ALL COMMAND ${CMAKE_COMMAND} 
  -E copy_directory
    "${PROJECT_SOURCE_DIR}/res"
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$<CONFIGURATION>/res
)